import { fail } from "@sveltejs/kit";
import type { Actions } from "@sveltejs/kit";

const MAX_FILE_SIZE_MB = 3;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;

export const actions: Actions = {
    uploadLinkedInPDF: async ({ request, cookies }) => {
        const data = await request.formData();
        const file = data.get("linkedin_pdf") as File | null;

        if (!file || file.size === 0) {
            return fail(400, { linkedin: { error: 'No file was provided.' } });
        }
        if (file.type !== 'application/pdf') {
            return fail(400, { linkedin: { error: 'File must be a PDF.' } });
        }
        if (file.size > MAX_FILE_SIZE_BYTES) {
            return fail(400, {
                linkedin: { error: `File size cannot exceed ${MAX_FILE_SIZE_MB}MB.` }
            });
        }
        // TODO: Add logic to check if the PDF was generated by LinkedIn.
        // Better to let Fede handle complex tasks with his fancy Python skills.

        // TODO: So the linkedin PDF isn't stored, it's just used to generate data.

        return { linkedin: { success: true, message: 'LinkedIn PDF uploaded successfully!' } };
    },
    uploadPersonalCV: async ({ request, cookies }) => {
        const data = await request.formData();
        const file = data.get('personal_cv') as File | null;
        const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];

        if (!file || file.size === 0) {
            return fail(400, { personal: { error: 'No file was provided' } });
        }
        if (!allowedTypes.includes(file.type)) {
            return fail(400, {
                linkedin: {
                    error: 'File must be a PDF or DOCX document.'
                }
            });
        }

        if (file.size > MAX_FILE_SIZE_BYTES) {
            return fail(400, {
                personal: { error: `File size cannot exceed ${MAX_FILE_SIZE_MB}MB.` }
            });
        }

        // TODO: Store the file and save the URL to the user's profile in the database.

        return { personal: { success: true, message: 'Personal CV uploaded successfully!' } };
    }
};